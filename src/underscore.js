//     Underscore.js 1.8.3//     http://underscorejs.org//     (c) 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors//     Underscore may be freely distributed under the MIT license.(function() {    // 两个重要概念：    // 偏函数应用(Partial Application）和函数柯里化(Currying)    // 偏函数应用指的是固化函数的一个或一些参数，从而产生一个新的函数    // Currying指的是将一个具有多个参数的函数，转换成能够通过一系列的函数链式调用，其中每一个函数都只有一个参数    // 区别：    // 偏函数后依然可以使用多参数，只要还有参数未固化；而Currying只能使用函数链    // 函数加里化得到简化的函数方式更自然，而偏函数必须借用高阶函数或手动生成    // 偏函数和Currying有什么用？    // 函数加里化(Currying)和偏函数应用(Partial Application)的比较    // 主要就是从能一个通用函数得到更特定的函数    // 参考资料：    // http://www.cnblogs.com/cypine/p/3258552.html    // http://www.vaikan.com/currying-partial-application/    // http://benalman.com/news/2012/09/partial-application-in-javascript/    // http://www.jstips.co/zh_cn/curry-vs-partial-application/    // 函数编程的一些概念：    // http://hao.jser.com/archive/10619/    // 高等函数：一个接收某个函数作为参数的函数成为高等函数，该函数可以选择返回一个函数也可以返回其他类型    // Baseline setup    // --------------    // Establish the root object, `window` (`self`) in the browser, `global`    // on the server, or `this` in some virtual machines.    // We use `self` instead of `window` for `WebWorker` support.    //WebWorker中没有window对象，所以使用browser和WebWorker共有的self对象    var root = typeof self == 'object' && self.self === self && self                ||                typeof global == 'object' && global.global === global && global                ||                this;    // Save the previous value of the `_` variable.    // 保存引入此库之前占用的'_'变量    var previousUnderscore = root._;    // Save bytes in the minified (but not gzipped) version:    // underscore只扩展了Array,Object，还有一个库underscore.string，是扩展了String.    var ArrayProto = Array.prototype,        ObjProto = Object.prototype;    // Create quick reference variables for speed access to core prototypes.    var push = ArrayProto.push,        slice = ArrayProto.slice,        toString = ObjProto.toString,        hasOwnProperty = ObjProto.hasOwnProperty;    // All **ECMAScript 5** native function implementations that we hope to use    // are declared here.    var nativeIsArray = Array.isArray,        nativeKeys = Object.keys,        nativeCreate = Object.create;    // Naked function reference for surrogate-prototype-swapping.    var Ctor = function() {};    // Create a safe reference to the Underscore object for use below.    var _ = function(obj) {        if (obj instanceof _) {            return obj;        }        // 无new操作，如 var arr = Array(3)        // 如果你调用_，不是用new的，函数内部自动会给你new的        // 高程：22.1.2小节，第597页讲过（作用域安全的构造函数）        // function Person(name,age,job){        //     if(this instanceof Person){        //         this.name = name;        //         this.age = age;        //         this.job = job;        //     }else{        //         return new Person(name,age,job);        //     }        // }        // var p1 = new Person('weiqq',20,'FE');        if (!(this instanceof _)) {            return new _(obj);        }        this._wrapped = obj;    };    // Export the Underscore object for **Node.js**, with    // backwards-compatibility for their old module API. If we're in    // the browser, add `_` as a global object.    // (`nodeType` is checked to ensure that `module`    // and `exports` are not HTML elements.)    if (typeof exports != 'undefined' && !exports.nodeType) {        if (typeof module != 'undefined' && !module.nodeType && module.exports) {            exports = module.exports = _;        }        exports._ = _;    } else {        root._ = _;    }    // Current version.    _.VERSION = '1.8.3';    // Internal function that returns an efficient (for current engines) version    // of the passed-in callback, to be repeatedly applied in other Underscore    // functions.    // 为传入的函数绑定上下文    var optimizeCb = function(func, context, argCount) {        if (context === void 0) return func;        switch (argCount == null ? 3 : argCount) {            case 1:                return function(value) {                    return func.call(context, value);                };                // The 2-parameter case has been omitted only because no current consumers                // made use of it.            case 3:                return function(value, index, collection) {                    return func.call(context, value, index, collection);                };            case 4:                return function(accumulator, value, index, collection) {                    return func.call(context, accumulator, value, index, collection);                };        }        return function() {            return func.apply(context, arguments);        };    };    //???    // var optimizeCb = function(func, context, argCount) {    //     if (context === void 0) return func;    //     return function() {    //         return func.apply(context, arguments);    //     }    // }    // var optimizeCb = function(func,context,argCount){    //     if(context === void 0) return func;    //     return func.bind(context,arguments);    // }    // An internal function to generate callbacks that can be applied to each    // element in a collection, returning the desired result — either `identity`,    // an arbitrary callback, a property matcher, or a property accessor.    // 根据第一个参数的不同，返回不同的回调函数    var cb = function(value, context, argCount) {        // 值为空，返回默认的迭代器        if (value == null){            return _.identity;        }        if (_.isFunction(value)){            return optimizeCb(value, context, argCount);        }        if (_.isObject(value)){            return _.matcher(value);        }        return _.property(value);    };    // An external wrapper for the internal callback generator.    // 偏函数    _.iteratee = function(value, context) {        return cb(value, context, Infinity);    };    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)    // This accumulates the arguments passed into an array, after a given index.    // 生成一个能接受不定参数的函数，并将不定参数转换成一个数组。    // https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/rest%E5%8F%82%E6%95%B0.html    var restArgs = function(func, startIndex) {        startIndex = startIndex == null ? func.length - 1 : +startIndex;        return function() {            var length = Math.max(arguments.length - startIndex, 0);            var rest = Array(length);            for (var index = 0; index < length; index++) {                rest[index] = arguments[index + startIndex];            }            switch (startIndex) {                case 0:                    return func.call(this, rest);                case 1:                    return func.call(this, arguments[0], rest);                case 2:                    return func.call(this, arguments[0], arguments[1], rest);            }            var args = Array(startIndex + 1);            for (index = 0; index < startIndex; index++) {                args[index] = arguments[index];            }            args[startIndex] = rest;            return func.apply(this, args);        };    };    // An internal function for creating a new object that inherits from another.    // 一个内部用于通过继承创建对象的方法    var baseCreate = function(prototype) {        if (!_.isObject(prototype)){            return {};        }        // navtiveCreate => Object.create        if (nativeCreate){            return nativeCreate(prototype);        }        // Ctor = function(){}        Ctor.prototype = prototype;        var result = new Ctor;        // ???        Ctor.prototype = null;        return result;    };    // polyfill    // if (typeof Object.create != 'function') {    //     Object.create = (function(undefined) {    //         var Temp = function() {};    //         return function (prototype, propertiesObject) {    //             if(prototype !== Object(prototype) && prototype !== null) {    //                 throw TypeError('Argument must be an object, or null');    //             }    //             Temp.prototype = prototype || {};    //             var result = new Temp();    //             Temp.prototype = null;    //             if (propertiesObject !== undefined) {    //                 Object.defineProperties(result, propertiesObject);    //             }    //    //             // to imitate the case of Object.create(null)    //             模仿Object.create(null)的情况    //             if(prototype === null) {    //                 result.__proto__ = null;    //             }    //             return result;    //         };    //     })();    // }    //获得对象的指定属性（key）    // var getName = property('name');    // var name = getName({name:'zhuxy'}); => 'zhuxy'    var property = function(key) {        return function(obj) {            // ???            // return obj ? void 0 : obj[key];            return obj == null ? void 0 : obj[key];        };    };    // Helper for collection methods to determine whether a collection    // should be iterated as an array or as an object.    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;    var getLength = property('length');    // 判断是否为数组或者类数组（具有length属性且值为Number类型同时值大于等于0）    // [1,2] => true    // {name:'zhuxy',length:10} => true    // {name:'zhuxy'} => false    // {name:'zhuxy',length:'10'} => false    // {name:'zhuxy',length:-10} => false    var isArrayLike = function(collection) {        // 类似 obj.length        // 正常写法：        // var length = collection == null ? void 0: collection.length;        var length = getLength(collection);        return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;    };    // jQuery的判断    // function isArraylike( obj ) {    //     var length = obj.length,    //         type = jQuery.type( obj );    //     if ( jQuery.isWindow( obj ) ) {    //         return false;    //     }    //     if ( obj.nodeType === 1 && length ) {    //         return true;    //     }    //     return type === "array" || type !== "function" &&    //         ( length === 0 ||    //         typeof length === "number" && length > 0 && ( length - 1 ) in obj );    // }    // Collection Functions    // --------------------    // The cornerstone, an `each` implementation, aka `forEach`.    // Handles raw objects in addition to array-likes. Treats all    // sparse array-likes as if they were dense.    // 处理 对象，类数组，数组    _.each = _.forEach = function(obj, iteratee, context) {        iteratee = optimizeCb(iteratee, context);        var i, length;        if (isArrayLike(obj)) {//是否为数组或类数组            for (i = 0, length = obj.length; i < length; i++) {                iteratee(obj[i], i, obj);            }        } else {            var keys = _.keys(obj);            for (i = 0, length = keys.length; i < length; i++) {                iteratee(obj[keys[i]], keys[i], obj);            }            // ??? _.keys 做了Object.prototype.hasOwnProperty检测            // for (i in obj) {            //     iteratee(obj[i], i, obj);            // }        }        return obj;    };    // Return the results of applying the iteratee to each element.    // 不管传入的是Array或Objec，返回的是一个数组    _.map = _.collect = function(obj, iteratee, context) {        iteratee = cb(iteratee, context);            // 是否为类数组，数组：是则返回false，否返回对象的key组成的数组        var keys = !isArrayLike(obj) && _.keys(obj),            // 若有keys则返回其长度，否则返回 obj（类数组／数组）的length值            length = (keys || obj).length,            // 创建一个指定长度的空数组 ???            results = Array(length);        for (var index = 0; index < length; index++) {            var currentKey = keys ? keys[index] : index;            results[index] = iteratee(obj[currentKey], currentKey, obj);        }        return results;    };    // Create a reducing function iterating left or right.    var createReduce = function(dir) {        // Wrap code that reassigns argument variables in a separate function than        // the one that accesses `arguments.length` to avoid a perf hit. (#1991)        var reducer = function(obj, iteratee, memo, initial) {            var keys = !isArrayLike(obj) && _.keys(obj),                length = (keys || obj).length,                // dir大于0:左到右，dir小于0:右到左                index = dir > 0 ? 0 : length - 1;            if (!initial) {                memo = obj[keys ? keys[index] : index];                index += dir;            }            // index += dir，巧妙的不要判断dir类型（左到右或右到左）            // if(dir > 0){            //     for(;index < length; index++){            //         var currentKey = keys ? keys[index] : index;            //         memo = iteratee(memo, obj[currentKey], currentKey, obj);            //     }            // }else{            //     for(;index >= 0; index--){            //         var currentKey = keys ? keys[index] : index;            //         memo = iteratee(memo, obj[currentKey], currentKey, obj);            //     }            // }            for (; index >= 0 && index < length; index += dir) {                // ??? 为何要每次都判断？                var currentKey = keys ? keys[index] : index;                memo = iteratee(memo, obj[currentKey], currentKey, obj);            }            return memo;        };        return function(obj, iteratee, memo, context) {            var initial = arguments.length >= 3;            return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);        };    };    // **Reduce** builds up a single result from a list of values, aka `inject`,    // or `foldl`.    _.reduce = _.foldl = _.inject = createReduce(1);    // The right-associative version of reduce, also known as `foldr`.    _.reduceRight = _.foldr = createReduce(-1);    // Return the first value which passes a truth test. Aliased as `detect`.    // 区分类数组／数组和对象    _.find = _.detect = function(obj, predicate, context) {        var key;        if (isArrayLike(obj)) {            key = _.findIndex(obj, predicate, context);        } else {            key = _.findKey(obj, predicate, context);        }        if (key !== void 0 && key !== -1) return obj[key];    };    // Return all the elements that pass a truth test.    // Aliased as `select`.    _.filter = _.select = function(obj, predicate, context) {        var results = [];        predicate = cb(predicate, context);        _.each(obj, function(value, index, list) {            if (predicate(value, index, list)) results.push(value);        });        return results;    };    // Return all the elements for which a truth test fails.    // _.filter取反    _.reject = function(obj, predicate, context) {        return _.filter(obj, _.negate(cb(predicate)), context);        // _.negate = function(predicate) {        //     return function() {        //         return !predicate.apply(this, arguments);        //     };        // };        // return _.filter(        //             obj,        //             function() {        //                 return !cb(predicate).apply(this, arguments);        //             },        //             context        //         )    };    // Determine whether all of the elements match a truth test.    // Aliased as `all`.    _.every = _.all = function(obj, predicate, context) {        predicate = cb(predicate, context);        var keys = !isArrayLike(obj) && _.keys(obj),            length = (keys || obj).length;        for (var index = 0; index < length; index++) {            var currentKey = keys ? keys[index] : index;            if (!predicate(obj[currentKey], currentKey, obj)) return false;        }        return true;    };    // Determine if at least one element in the object matches a truth test.    // Aliased as `any`.    _.some = _.any = function(obj, predicate, context) {        predicate = cb(predicate, context);        var keys = !isArrayLike(obj) && _.keys(obj),            length = (keys || obj).length;        for (var index = 0; index < length; index++) {            var currentKey = keys ? keys[index] : index;            if (predicate(obj[currentKey], currentKey, obj)) return true;        }        return false;    };    // Determine if the array or object contains a given item (using `===`).    // Aliased as `includes` and `include`.    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {        if (!isArrayLike(obj)){            obj = _.values(obj);        }        if (typeof fromIndex != 'number' || guard){            fromIndex = 0;        }        return _.indexOf(obj, item, fromIndex) >= 0;    };    // Invoke a method (with arguments) on every item in a collection.    _.invoke = restArgs(        function(obj, method, args) {            var isFunc = _.isFunction(method);            return _.map(obj, function(value) {                var func = isFunc ? method : value[method];                return func == null ? func : func.apply(value , args);            });        }    );    // Convenience version of a common use case of `map`: fetching a property.    // _.map的便利方法，只取出特定key的值。    // var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];    // _.pluck(stooges, 'name');    // => ["moe", "larry", "curly"]    // pluck:拉／拽／扯    _.pluck = function(obj, key) {        return _.map(obj, _.property(key));        // return _.map(obj,function(item){        //     return item[key];        // })    };    // Convenience version of a common use case of `filter`: selecting only objects    // containing specific `key:value` pairs.    // filter的便捷方法，取出包含特定key:value的值    // 返回数组    _.where = function(obj, attrs) {        return _.filter(obj, _.matcher(attrs));    };    // Convenience version of a common use case of `find`: getting the first object    // containing specific `key:value` pairs.    _.findWhere = function(obj, attrs) {        return _.find(obj, _.matcher(attrs));    };    // Return the maximum element (or element-based computation).    _.max = function(obj, iteratee, context) {        var result = -Infinity,            lastComputed = -Infinity,            value, computed;        if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object') && obj != null) {            obj = isArrayLike(obj) ? obj : _.values(obj);            for (var i = 0, length = obj.length; i < length; i++) {                value = obj[i];                if (value != null && value > result) {                    result = value;                }            }        } else {            iteratee = cb(iteratee, context);            _.each(obj, function(v, index, list) {                computed = iteratee(v, index, list);                if (computed > lastComputed || computed === -Infinity && result === -Infinity) {                    result = v;                    lastComputed = computed;                }            });        }        return result;    };    // Return the minimum element (or element-based computation).    _.min = function(obj, iteratee, context) {        var result = Infinity,            lastComputed = Infinity,            value, computed;        if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object') && obj != null) {            obj = isArrayLike(obj) ? obj : _.values(obj);            for (var i = 0, length = obj.length; i < length; i++) {                value = obj[i];                if (value != null && value < result) {                    result = value;                }            }        } else {            iteratee = cb(iteratee, context);            _.each(obj, function(v, index, list) {                computed = iteratee(v, index, list);                if (computed < lastComputed || computed === Infinity && result === Infinity) {                    result = v;                    lastComputed = computed;                }            });        }        return result;    };    // Shuffle a collection.    _.shuffle = function(obj) {        return _.sample(obj, Infinity);    };    // Sample **n** random values from a collection using the modern version of the    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).    // If **n** is not specified, returns a single random element.    // The internal `guard` argument allows it to work with `map`.    _.sample = function(obj, n, guard) {        if (n == null || guard) {            if (!isArrayLike(obj)) obj = _.values(obj);            return obj[_.random(obj.length - 1)];        }        var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);        var length = getLength(sample);        n = Math.max(Math.min(n, length), 0);        var last = length - 1;        for (var index = 0; index < n; index++) {            var rand = _.random(index, last);            var temp = sample[index];            sample[index] = sample[rand];            sample[rand] = temp;        }        return sample.slice(0, n);    };    // Sort the object's values by a criterion produced by an iteratee.    _.sortBy = function(obj, iteratee, context) {        var index = 0;        iteratee = cb(iteratee, context);        return _.pluck(_.map(obj, function(value, key, list) {            return {                value: value,                index: index++,                criteria: iteratee(value, key, list)            };        }).sort(function(left, right) {            var a = left.criteria;            var b = right.criteria;            if (a !== b) {                if (a > b || a === void 0) return 1;                if (a < b || b === void 0) return -1;            }            return left.index - right.index;        }), 'value');    };    // An internal function used for aggregate "group by" operations.    var group = function(behavior, partition) {        return function(obj, iteratee, context) {            var result = partition ? [                [],                []            ] : {};            iteratee = cb(iteratee, context);            _.each(obj, function(value, index) {                var key = iteratee(value, index, obj);                behavior(result, value, key);            });            return result;        };    };    // Groups the object's values by a criterion. Pass either a string attribute    // to group by, or a function that returns the criterion.    _.groupBy = group(function(result, value, key) {        if (_.has(result, key)) result[key].push(value);        else result[key] = [value];    });    // Indexes the object's values by a criterion, similar to `groupBy`, but for    // when you know that your index values will be unique.    _.indexBy = group(function(result, value, key) {        result[key] = value;    });    // Counts instances of an object that group by a certain criterion. Pass    // either a string attribute to count by, or a function that returns the    // criterion.    _.countBy = group(function(result, value, key) {        if (_.has(result, key)) result[key]++;        else result[key] = 1;    });    var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;    // Safely create a real, live array from anything iterable.    _.toArray = function(obj) {        if (!obj) return [];        if (_.isArray(obj)) return slice.call(obj);        if (_.isString(obj)) {            // Keep surrogate pair characters together            return obj.match(reStrSymbol);        }        if (isArrayLike(obj)) return _.map(obj, _.identity);        return _.values(obj);    };    // Return the number of elements in an object.    _.size = function(obj) {        if (obj == null) return 0;        return isArrayLike(obj) ? obj.length : _.keys(obj).length;    };    // Split a collection into two arrays: one whose elements all satisfy the given    // predicate, and one whose elements all do not satisfy the predicate.    _.partition = group(function(result, value, pass) {        result[pass ? 0 : 1].push(value);    }, true);    // Array Functions    // ---------------    // Get the first element of an array. Passing **n** will return the first N    // values in the array. Aliased as `head` and `take`. The **guard** check    // allows it to work with `_.map`.    _.first = _.head = _.take = function(array, n, guard) {        if (array == null) return void 0;        if (n == null || guard) return array[0];        return _.initial(array, array.length - n);    };    // Returns everything but the last entry of the array. Especially useful on    // the arguments object. Passing **n** will return all the values in    // the array, excluding the last N.    _.initial = function(array, n, guard) {        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));    };    // Get the last element of an array. Passing **n** will return the last N    // values in the array.    _.last = function(array, n, guard) {        if (array == null) return void 0;        if (n == null || guard) return array[array.length - 1];        return _.rest(array, Math.max(0, array.length - n));    };    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.    // Especially useful on the arguments object. Passing an **n** will return    // the rest N values in the array.    _.rest = _.tail = _.drop = function(array, n, guard) {        return slice.call(array, n == null || guard ? 1 : n);    };    // Trim out all falsy values from an array.    // 过滤掉所有可以转换为 false 的值，[0,null,false,'',undefined,NaN,11] => [11]    _.compact = function(array) {        return _.filter(array, _.identity);    };    // Internal implementation of a recursive `flatten` function.    var flatten = function(input, shallow, strict, output) {        output = output || [];        var idx = output.length;        for (var i = 0, length = getLength(input); i < length; i++) {            var value = input[i];            if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {                // Flatten current level of array or arguments object.                if (shallow) {                    var j = 0,                        len = value.length;                    while (j < len) output[idx++] = value[j++];                } else {                    flatten(value, shallow, strict, output);                    idx = output.lengt                    h;                }            } else if (!strict) {                output[idx++] = value;            }        }        return output;    };    // Flatten out an array, either recursively (by default), or just one level.    _.flatten = function(array, shallow) {        return flatten(array, shallow, false);    };    // Return a version of the array that does not contain the specified value(s).    _.without = restArgs(function(array, otherArrays) {        return _.difference(array, otherArrays);    });    // Produce a duplicate-free version of the array. If the array has already    // been sorted, you have the option of using a faster algorithm.    // Aliased as `unique`.    _.uniq = _.unique = function(array, isSorted, iteratee, context) {        if (!_.isBoolean(isSorted)) {            context = iteratee;            iteratee = isSorted;            isSorted = false;        }        if (iteratee != null) iteratee = cb(iteratee, context);        var result = [];        var seen = [];        for (var i = 0, length = getLength(array); i < length; i++) {            var value = array[i],                computed = iteratee ? iteratee(value, i, array) : value;            if (isSorted) {                if (!i || seen !== computed) result.push(value);                seen = computed;            } else if (iteratee) {                if (!_.contains(seen, computed)) {                    seen.push(computed);                    result.push(value);                }            } else if (!_.contains(result, value)) {                result.push(value);            }        }        return result;    };    // Produce an array that contains the union: each distinct element from all of    // the passed-in arrays.    _.union = restArgs(function(arrays) {        return _.uniq(flatten(arrays, true, true));    });    // Produce an array that contains every item shared between all the    // passed-in arrays.    _.intersection = function(array) {        var result = [];        var argsLength = arguments.length;        for (var i = 0, length = getLength(array); i < length; i++) {            var item = array[i];            if (_.contains(result, item)) continue;            var j;            for (j = 1; j < argsLength; j++) {                if (!_.contains(arguments[j], item)) break;            }            if (j === argsLength) result.push(item);        }        return result;    };    // Take the difference between one array and a number of other arrays.    // Only the elements present in just the first array will remain.    _.difference = restArgs(function(array, rest) {        rest = flatten(rest, true, true);        return _.filter(array, function(value) {            return !_.contains(rest, value);        });    });    // Complement of _.zip. Unzip accepts an array of arrays and groups    // each array's elements on shared indices.    _.unzip = function(array) {        var length = array && _.max(array, getLength).length || 0;        var result = Array(length);        for (var index = 0; index < length; index++) {            result[index] = _.pluck(array, index);        }        return result;    };    // Zip together multiple lists into a single array -- elements that share    // an index go together.    _.zip = restArgs(_.unzip);    // Converts lists into objects. Pass either a single array of `[key, value]`    // pairs, or two parallel arrays of the same length -- one of keys, and one of    // the corresponding values.    _.object = function(list, values) {        var result = {};        for (var i = 0, length = getLength(list); i < length; i++) {            if (values) {                result[list[i]] = values[i];            } else {                result[list[i][0]] = list[i][1];            }        }        return result;    };    // Generator function to create the findIndex and findLastIndex functions.    var createPredicateIndexFinder = function(dir) {        return function(array, predicate, context) {            predicate = cb(predicate, context);            var length = getLength(array);            var index = dir > 0 ? 0 : length - 1;            for (; index >= 0 && index < length; index += dir) {                if (predicate(array[index], index, array)) return index;            }            return -1;        };    };    // Returns the first index on an array-like that passes a predicate test.    _.findIndex = createPredicateIndexFinder(1);    _.findLastIndex = createPredicateIndexFinder(-1);    // Use a comparator function to figure out the smallest index at which    // an object should be inserted so as to maintain order. Uses binary search.    _.sortedIndex = function(array, obj, iteratee, context) {        iteratee = cb(iteratee, context, 1);        var value = iteratee(obj);        var low = 0,            high = getLength(array);        while (low < high) {            var mid = Math.floor((low + high) / 2);            if (iteratee(array[mid]) < value) low = mid + 1;            else high = mid;        }        return low;    };    // Generator function to create the indexOf and lastIndexOf functions.    var createIndexFinder = function(dir, predicateFind, sortedIndex) {        return function(array, item, idx) {            var i = 0,                length = getLength(array);            if (typeof idx == 'number') {                if (dir > 0) {                    i = idx >= 0 ? idx : Math.max(idx + length, i);                } else {                    length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;                }            } else if (sortedIndex && idx && length) {                idx = sortedIndex(array, item);                return array[idx] === item ? idx : -1;            }            if (item !== item) {                idx = predicateFind(slice.call(array, i, length), _.isNaN);                return idx >= 0 ? idx + i : -1;            }            for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {                if (array[idx] === item) return idx;            }            return -1;        };    };    // Return the position of the first occurrence of an item in an array,    // or -1 if the item is not included in the array.    // If the array is large and already in sort order, pass `true`    // for **isSorted** to use binary search.    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);    // Generate an integer Array containing an arithmetic progression. A port of    // the native Python `range()` function. See    // [the Python documentation](http://docs.python.org/library/functions.html#range).    _.range = function(start, stop, step) {        if (stop == null) {            stop = start || 0;            start = 0;        }        if (!step) {            step = stop < start ? -1 : 1;        }        var length = Math.max(Math.ceil((stop - start) / step), 0);        var range = Array(length);        for (var idx = 0; idx < length; idx++, start += step) {            range[idx] = start;        }        return range;    };    // Split an **array** into several arrays containing **count** or less elements    // of initial array.    _.chunk = function(array, count) {        if (count == null || count < 1) return [];        var result = [];        var i = 0,            length = array.length;        while (i < length) {            result.push(slice.call(array, i, i += count));        }        return result;    };    // Function (ahem) Functions    // ------------------    // Determines whether to execute a function as a constructor    // or a normal function with the provided arguments.    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {        if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);        var self = baseCreate(sourceFunc.prototype);        var result = sourceFunc.apply(self, args);        if (_.isObject(result)) return result;        return self;    };    // Create a function bound to a given object (assigning `this`, and arguments,    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if    // available.    _.bind = restArgs(function(func, context, args) {        if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');        var bound = restArgs(function(callArgs) {            return executeBound(func, bound, context, this, args.concat(callArgs));        });        return bound;    });    // Partially apply a function by creating a version that has had some of its    // arguments pre-filled, without changing its dynamic `this` context. _ acts    // as a placeholder by default, allowing any combination of arguments to be    // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.    _.partial = restArgs(function(func, boundArgs) {        var placeholder = _.partial.placeholder;        var bound = function() {            var position = 0,                length = boundArgs.length;            var args = Array(length);            for (var i = 0; i < length; i++) {                args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];            }            while (position < arguments.length) args.push(arguments[position++]);            return executeBound(func, bound, this, this, args);        };        return bound;    });    _.partial.placeholder = _;    // Bind a number of an object's methods to that object. Remaining arguments    // are the method names to be bound. Useful for ensuring that all callbacks    // defined on an object belong to it.    _.bindAll = restArgs(function(obj, keys) {        keys = flatten(keys, false, false);        var index = keys.length;        if (index < 1) throw new Error('bindAll must be passed function names');        while (index--) {            var key = keys[index];            obj[key] = _.bind(obj[key], obj);        }    });    // Memoize an expensive function by storing its results.    _.memoize = function(func, hasher) {        var memoize = function(key) {            var cache = memoize.cache;            var address = '' + (hasher ? hasher.apply(this, arguments) : key);            if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);            return cache[address];        };        memoize.cache = {};        return memoize;    };    // Delays a function for the given number of milliseconds, and then calls    // it with the arguments supplied.    _.delay = restArgs(function(func, wait, args) {        return setTimeout(function() {            return func.apply(null, args);        }, wait);    });    // Defers a function, scheduling it to run after the current call stack has    // cleared.    _.defer = _.partial(_.delay, _, 1);    // Returns a function, that, when invoked, will only be triggered at most once    // during a given window of time. Normally, the throttled function will run    // as much as it can, without ever going more than once per `wait` duration;    // but if you'd like to disable the execution on the leading edge, pass    // `{leading: false}`. To disable execution on the trailing edge, ditto.    _.throttle = function(func, wait, options) {        var timeout, context, args, result;        var previous = 0;        if (!options) options = {};        var later = function() {            previous = options.leading === false ? 0 : _.now();            timeout = null;            result = func.apply(context, args);            if (!timeout) context = args = null;        };        var throttled = function() {            var now = _.now();            if (!previous && options.leading === false) previous = now;            var remaining = wait - (now - previous);            context = this;            args = arguments;            if (remaining <= 0 || remaining > wait) {                if (timeout) {                    clearTimeout(timeout);                    timeout = null;                }                previous = now;                result = func.apply(context, args);                if (!timeout) context = args = null;            } else if (!timeout && options.trailing !== false) {                timeout = setTimeout(later, remaining);            }            return result;        };        throttled.cancel = function() {            clearTimeout(timeout);            previous = 0;            timeout = context = args = null;        };        return throttled;    };    // Returns a function, that, as long as it continues to be invoked, will not    // be triggered. The function will be called after it stops being called for    // N milliseconds. If `immediate` is passed, trigger the function on the    // leading edge, instead of the trailing.    _.debounce = function(func, wait, immediate) {        var timeout, result;        var later = function(context, args) {            timeout = null;            if (args) result = func.apply(context, args);        };        var debounced = restArgs(function(args) {            var callNow = immediate && !timeout;            if (timeout) clearTimeout(timeout);            if (callNow) {                timeout = setTimeout(later, wait);                result = func.apply(this, args);            } else if (!immediate) {                timeout = _.delay(later, wait, this, args);            }            return result;        });        debounced.cancel = function() {            clearTimeout(timeout);            timeout = null;        };        return debounced;    };    // Returns the first function passed as an argument to the second,    // allowing you to adjust arguments, run code before and after, and    // conditionally execute the original function.    _.wrap = function(func, wrapper) {        return _.partial(wrapper, func);    };    // Returns a negated version of the passed-in predicate.    _.negate = function(predicate) {        return function() {            return !predicate.apply(this, arguments);        };    };    // Returns a function that is the composition of a list of functions, each    // consuming the return value of the function that follows.    _.compose = function() {        var args = arguments;        var start = args.length - 1;        return function() {            var i = start;            var result = args[start].apply(this, arguments);            while (i--) result = args[i].call(this, result);            return result;        };    };    // Returns a function that will only be executed on and after the Nth call.    _.after = function(times, func) {        return function() {            if (--times < 1) {                return func.apply(this, arguments);            }        };    };    // Returns a function that will only be executed up to (but not including) the Nth call.    _.before = function(times, func) {        var memo;        return function() {            if (--times > 0) {                memo = func.apply(this, arguments);            }            if (times <= 1) func = null;            return memo;        };    };    // Returns a function that will be executed at most one time, no matter how    // often you call it. Useful for lazy initialization.    _.once = _.partial(_.before, 2);    _.restArgs = restArgs;    // Object Functions    // ----------------    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.    // https://segmentfault.com/a/1190000005177883    // for in 出问题有两个条件：1. IE<9, 2.被枚举的对象某些键被重写，比如 toString。    // var obj = {toString: 'hanzichi',name:'iwjw'};    //    // for (var k in obj) {    //     alert(k);    // }    // 在 chrome 中我们 alert 出了预期的 "toString"和"iwjw"，而在 IE 8 中只弹出"iwjw"。    // hasOwnProperty 和 propertyIsEnumerable 的区别？    // https://www.zhihu.com/question/21907133    // propertyIsEnumerable returns a Boolean indicating whether the specified property is enumerable    // propertyIsEnumerable 返回一个Boolean值以此来表示指定属性是否可以枚举。    // 为何加 ! ?    //    var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');    // 出问题的键    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString' ];    var collectNonEnumProps = function(obj, keys) {        var nonEnumIdx = nonEnumerableProps.length;        var constructor = obj.constructor;        // 如果为函数，则返回该函数的原型，否则返回Object.prototype        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;        // Constructor is a special case.        var prop = 'constructor';        // 若对象自身有'constructor'属性，但又没有在keys中，则加入数组。        if ( _.has(obj, prop) && !_.contains(keys, prop) ) {            keys.push(prop);        }        while (nonEnumIdx--) {            prop = nonEnumerableProps[nonEnumIdx];            //             if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {                keys.push(prop);            }        }    };    // Retrieve the names of an object's own properties.    // Delegates to **ECMAScript 5**'s native `Object.keys`.    // 获取对象的可枚举自有属性，不包括原型链上的，ES5则使用Object.keys。    _.keys = function(obj) {        // 不是对象返回空数组        if (!_.isObject(obj)){            return [];        }        // 检测是否有本地Object.keys        if (!nativeKeys){            return nativeKeys(obj);        }        // 无本地方法，则for...in循环，同时排出继承的属性        var keys = [];        for (var key in obj){            if (_.has(obj, key)){                keys.push(key);            }        }            // Ahem(嗯哼), IE < 9.        if (!hasEnumBug){            collectNonEnumProps(obj, keys);        }        return keys;    };    // Retrieve all the property names of an object.    // 获取对象的所有属性，包括继承的    _.allKeys = function(obj){        if (!_.isObject(obj)){            return [];        }        var keys = [];        for (var key in obj){            keys.push(key);        }        // Ahem, IE < 9.        if (hasEnumBug){            collectNonEnumProps(obj, keys);        }        return keys;    };    // Retrieve the values of an object's properties.    // 获取对象的属性值，组成一个数组返回。    // _.values({one: 1, two: 2, three: 3});    // => [1, 2, 3]    _.values = function(obj) {        var keys = _.keys(obj);        var length = keys.length;        // var values = [];        // ??? 为何要声明一个定长度的数组？        // http://javascript.ruanyifeng.com/stdlib/array.html        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array        // Array(x[,x])，传入的参数不同行为不同        var values = Array(length);        for (var i = 0; i < length; i++) {            values[i] = obj[keys[i]];        }        return values;    };    // Returns the results of applying the iteratee to each element of the object.    // In contrast to _.map it returns an object.    // 返回值是，为对象上的每个元素应用回调之后的值，与_.map对比其返回的是个对象    _.mapObject = function(obj, iteratee, context) {        iteratee = cb(iteratee, context);        var keys = _.keys(obj),            length = keys.length,            results = {};        for (var index = 0; index < length; index++) {            var currentKey = keys[index];            results[currentKey] = iteratee(obj[currentKey], currentKey, obj);        }        return results;    };    // Convert an object into a list of `[key, value]` pairs.    // 转对象为一个二位数组：    // {one: 1, two: 2, three: 3} => [["one", 1], ["two", 2], ["three", 3]]    // 先取出所有的key，然后声明一个数组，再遍历key的数组，    _.pairs = function(obj) {        // 去除所有的自身key        var keys = _.keys(obj);        var length = keys.length;        // 声明一个定长的数组        var pairs = Array(length);        var key = '';        for (var i = 0; i < length; i++) {            key = keys[i];            pairs[i] = [key, obj[key]];        }        return pairs;    };    // Invert the keys and values of an object. The values must be serializable.    // 翻转键值对{x:y} => {y:x}    _.invert = function(obj) {        var result = {};        var keys = _.keys(obj);        var key = '';        for (var i = 0, length = keys.length; i < length; i++) {            // 取出key            key = keys[i];            // key/value翻转            result[obj[key]] = key;        }        return result;    };    // Return a sorted list of the function names available on the object.    // Aliased as `methods`.    // 返回对象上，所有方法（通过sort排序）组成的数组    _.functions = _.methods = function(obj) {        var names = [];        // 为何这里没有使用 _.keys 取出所有的key,然后遍历key ???        for (var key in obj) {            if ( _.isFunction(obj[key]) ){                names.push(key);            }        }        return names.sort();    };    // An internal function for creating assigner functions.    // 创建一个指定的方法    // 三个外部方法用到此内部方法    // _.extend 自身属性和原型链属性都继承    // _.extendOwn 自身属性继承    // _.defaults 只覆盖原对象为undefined的属性    // http://www.w3cfuns.com/notes/17398/ca4a6f6117fab81048c3bc873f4b3c36:storey-2.html    // https://github.com/hanzichi/underscore-analysis/issues/4    var createAssigner = function(keysFunc, defaults) {        return function(obj) {            var length = arguments.length;            // 在defaults为true的情况下，对obj为null／undefined的情况时，将obj转为 {}            if (defaults){                obj = Object(obj);            }            // 如果只传入一个参数或第一个参数为null／''/undefined，且defaults为false，则直接返回            if (length < 2 || obj == null){                return obj;            }            // 从第二个参数开始枚举            for (var index = 1; index < length; index++) {                // 取出源对象                var source = arguments[index],                    // 取出对象的keys                    // 取值的参数：_.keys / _.allKeys                    keys = keysFunc(source),                    l = keys.length;                for (var i = 0; i < l; i++) {                    var key = keys[i];                    // _.extend/_.extendOwn 的 defaults 参数都为 undefined，不需要判断 obj[key] 的值，所以此判断始终通过                    // _.defaults 参数为true，所以只能obj[key]的值为undefined时才通过，也就是不会覆盖前一个对象有的属性值                    // var iceCream = {flavor: "chocolate"};                    // _.defaults(iceCream, {flavor: "vanilla", sprinkles: "lots"});                    // => {flavor: "chocolate", sprinkles: "lots"}                    // 这里没有判断obj[key]是否为对象或者数组，所以不支持递归合并 !!!                    if (!defaults || obj[key] === void 0){                        obj[key] = source[key];                    }                }            }            return obj;        };    };    // Extend a given object with all the properties in passed-in object(s).    // 此方法不支持递归合并    // _.extend({user:{name:'zhuxy',age:'20'}},{user:{name:'weiqq'}});  =====> {user:{name:'weiqq'}};    // jQuery的支持    // jQuery.extend(true,{user:{name:'zhuxy',age:'20'}},{user:{name:'weiqq'}}); ===> {user:{name:'weiqq',age:20}}    // jQuery.extend = jQuery.fn.extend = function() {    //     var options, name, src, copy, copyIsArray, clone,    //         target = arguments[0] || {},    //         i = 1,    //         length = arguments.length,    //         deep = false;    //    //     // Handle a deep copy situation    //     if (typeof target === "boolean") {    //         deep = target;    //    //         // Skip the boolean and the target    //         target = arguments[i] || {};    //         i++;    //     }    //    //     // Handle case when target is a string or something (possible in deep copy)    //     if (typeof target !== "object" && !jQuery.isFunction(target)) {    //         target = {};    //     }    //    //     // Extend jQuery itself if only one argument is passed    //     if (i === length) {    //         target = this;    //         i--;    //     }    //    //     for (; i < length; i++) {    //         // Only deal with non-null/undefined values    //         if ((options = arguments[i]) != null) {    //             // Extend the base object    //             for (name in options) {    //                 src = target[name];    //                 copy = options[name];    //    //                 // Prevent never-ending loop    //                 if (target === copy) {    //                     continue;    //                 }    //    //                 // Recurse if we're merging plain objects or arrays    //                 if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {    //                     if (copyIsArray) {    //                         copyIsArray = false;    //                         clone = src && jQuery.isArray(src) ? src : [];    //    //                     } else {    //                         clone = src && jQuery.isPlainObject(src) ? src : {};    //                     }    //    //                     // Never move original objects, clone them    //                     target[name] = jQuery.extend(deep, clone, copy);    //    //                     // Don't bring in undefined values    //                 } else if (copy !== undefined) {    //                     target[name] = copy;    //                 }    //             }    //         }    //     }    //    //     // Return the modified object    //     return target;    // };    _.extend = createAssigner(_.allKeys);    // Assigns a given object with all the own properties in the passed-in object(s).    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)    // Object.assign只复制可枚举并且是自身的属性    // assign的实现    // if (typeof Object.assign != 'function') {    //   Object.assign = function(target) {    //     'use strict';    //     if (target == null) {    //       throw new TypeError('Cannot convert undefined or null to object');    //     }    //     target = Object(target);    //     for (var index = 1; index < arguments.length; index++) {    //       var source = arguments[index];    //       if (source != null) {    //         for (var key in source) {    //           if (Object.prototype.hasOwnProperty.call(source, key)) {    //             target[key] = source[key];    //           }    //         }    //       }    //     }    //     return target;    //   };    // }    _.extendOwn = _.assign = createAssigner(_.keys);    // Returns the first key on an object that passes a predicate test.    // 返回第一个通过断言key。    _.findKey = function(obj, predicate, context) {        predicate = cb(predicate, context);        var keys = _.keys(obj),            key;        for (var i = 0, length = keys.length; i < length; i++) {            key = keys[i];            // 传入的参数 value key obj            if( predicate(obj[key], key, obj) ){                return key;            }        }    };    // Internal pick helper function to determine if `obj` has key `key`.    // 内部方法pick的辅助方法已确认对象是否包含指定的key    var keyInObj = function(value, key, obj) {        return key in obj;    };    // Return a copy of the object only containing the whitelisted properties.    // 返回只在白名单里的出现的属性    _.pick = restArgs(function(obj, keys) {        var result = {},            iteratee = keys[0];        if (obj == null){            return result;        }        if (_.isFunction(iteratee)) {            if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);            keys = _.allKeys(obj);        } else {            iteratee = keyInObj;            keys = flatten(keys, false, false);            obj = Object(obj);        }        for (var i = 0, length = keys.length; i < length; i++) {            var key = keys[i];            var value = obj[key];            if (iteratee(value, key, obj)) result[key] = value;        }        return result;    });    // Return a copy of the object without the blacklisted properties.    // 返回不在黑名单里的对象属性    _.omit = restArgs(function(obj, keys) {        var iteratee = keys[0],            context;        if (_.isFunction(iteratee)) {            iteratee = _.negate(iteratee);            if (keys.length > 1) context = keys[1];        } else {            keys = _.map(flatten(keys, false, false), String);            iteratee = function(value, key) {                return !_.contains(keys, key);            };        }        return _.pick(obj, iteratee, context);    });    // Fill in a given object with default properties.    _.defaults = createAssigner(_.allKeys, true);    // Creates an object that inherits from the given prototype object.    // If additional properties are provided then they will be added to the    // created object.    // 使用传入的原型创建对象，若有额外的属性传入则添加到创建的对象上    _.create = function(prototype, props) {        var result = baseCreate(prototype);        if (props){            _.extendOwn(result, props);        }        return result;    };    // Create a (shallow-cloned) duplicate of an object.    // 克隆一个对象/数组，引用copy，不是值copy    // var obj1 = {name:'zhuxy',age:'25',hobby:[1,2,3]}    // var obj2 = _.clone(obj1);    //    // obj1.hobby[0] = 4;    // obj2.hobby   => [4,2,3]    // http://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value    // http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language    _.clone = function(obj) {        if (!_.isObject(obj)){            return obj;        }        return _.isArray(obj) ?                // 数组的clone方法                obj.slice() :                // 调用内部的extend                _.extend({}, obj);    };    // Invokes interceptor with the obj, and then returns obj.    // The primary purpose of this method is to "tap into" a method chain, in    // order to perform operations on intermediate results within the chain.    // 用拦截器调用obj,然后返回对象    // 这个方法的主要作用是嵌入到方法链中，在链式调用中操作中间结果。    _.tap = function(obj, interceptor) {        interceptor(obj);        return obj;    };    // Returns whether an object has a given set of `key:value` pairs.    // 对象是否包含attrs指定的键值对    // var stooge = {name: 'moe', age: 32};    // _.isMatch(stooge, {age: 32});    // => true    _.isMatch = function(object, attrs) {        var keys = _.keys(attrs),            length = keys.length;        // 当object为null时，根据attrs的key多少来判读是否包含        if (object == null){            return !length;        }        var obj = Object(object);        for (var i = 0; i < length; i++) {            var key = keys[i];            // 值不等或键不在对象中            // 为何不反过来??? （!(key in obj) || attrs[key] !== obj[key]）            if (attrs[key] !== obj[key] || !(key in obj)){                return false;            }        }        return true;    };    // Internal recursive comparison function for `isEqual`.    // 实现isEqual递归比较的内部方法    var eq, deepEq;    eq = function(a, b, aStack, bStack) {        // Identical objects are equal. `0 === -0`, but they aren't identical.        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).        if (a === b) return a !== 0 || 1 / a === 1 / b;        // A strict comparison is necessary because `null == undefined`.        if (a == null || b == null) return a === b;        // `NaN`s are equivalent, but non-reflexive.        if (a !== a) return b !== b;        // Exhaust primitive checks        var type = typeof a;        if (type !== 'function' && type !== 'object' && typeof b != 'object'){            return false;        }        return deepEq(a, b, aStack, bStack);        // Internal recursive comparison function for `isEqual`.    };    deepEq = function(a, b, aStack, bStack) {        // Unwrap any wrapped objects.        if (a instanceof _) a = a._wrapped;        if (b instanceof _) b = b._wrapped;        // Compare `[[Class]]` names.        var className = toString.call(a);        if (className !== toString.call(b)) return false;        switch (className) {            // Strings, numbers, regular expressions, dates, and booleans are compared by value.            case '[object RegExp]':                // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')            case '[object String]':                // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is                // equivalent to `new String("5")`.                return '' + a === '' + b;            case '[object Number]':                // `NaN`s are equivalent, but non-reflexive.                // Object(NaN) is equivalent to NaN.                if (+a !== +a) return +b !== +b;                // An `egal` comparison is performed for other numeric values.                return +a === 0 ? 1 / +a === 1 / b : +a === +b;            case '[object Date]':            case '[object Boolean]':                // Coerce dates and booleans to numeric primitive values. Dates are compared by their                // millisecond representations. Note that invalid dates with millisecond representations                // of `NaN` are not equivalent.                return +a === +b;        }        var areArrays = className === '[object Array]';        if (!areArrays) {            if (typeof a != 'object' || typeof b != 'object') return false;            // Objects with different constructors are not equivalent, but `Object`s or `Array`s            // from different frames are.            var aCtor = a.constructor,                bCtor = b.constructor;            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&                    _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {                return false;            }        }        // Assume equality for cyclic structures. The algorithm for detecting cyclic        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.        // Initializing stack of traversed objects.        // It's done here since we only need them for objects and arrays comparison.        aStack = aStack || [];        bStack = bStack || [];        var length = aStack.length;        while (length--) {            // Linear search. Performance is inversely proportional to the number of            // unique nested structures.            if (aStack[length] === a) return bStack[length] === b;        }        // Add the first object to the stack of traversed objects.        aStack.push(a);        bStack.push(b);        // Recursively compare objects and arrays.        if (areArrays) {            // Compare array lengths to determine if a deep comparison is necessary.            length = a.length;            if (length !== b.length) return false;            // Deep compare the contents, ignoring non-numeric properties.            while (length--) {                if (!eq(a[length], b[length], aStack, bStack)) return false;            }        } else {            // Deep compare objects.            var keys = _.keys(a),                key;            length = keys.length;            // Ensure that both objects contain the same number of properties before comparing deep equality.            if (_.keys(b).length !== length) return false;            while (length--) {                // Deep compare each member                key = keys[length];                if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;            }        }        // Remove the first object from the stack of traversed objects.        aStack.pop();        bStack.pop();        return true;    };    // Perform a deep comparison to check if two objects are equal.    _.isEqual = function(a, b) {        return eq(a, b);    };    // Is a given array, string, or object empty?    // An "empty" object has no enumerable own-properties.    // 给定的数组、字符串、对象是否为空的，（空的对象指没有可枚举的自有属性）    _.isEmpty = function(obj) {        // null、undefined返回true        if (obj == null){            return true;        }        // 类数组、数组、字符串、Argument实例都是根据length的长度判断        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))){            return obj.length === 0;        }        // 其余的都根据key的多少来判断        // 若是数字 _.keys(0)，返回一个空数组        return _.keys(obj).length === 0;    };    // Is a given value a DOM element?    // 给定的值是否为一个DOM元素    _.isElement = function(obj) {        // 为何要加 !! ??? 考虑 undefined、null、''、0做数据类型转换        return !!(obj && obj.nodeType === 1);    };    // Is a given value an array?    // Delegates to ECMA5's native Array.isArray    // 给定的值是否为数组，先用原生的去判断    _.isArray = nativeIsArray || function(obj) {        return toString.call(obj) === '[object Array]';    };    // Is a given variable an object?    _.isObject = function(obj) {        var type = typeof obj;        return type === 'function' || type === 'object' && !!obj; //排除 nul,因为typeof null 返回的也是 'object'    };    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol'], function(name) {        _['is' + name] = function(obj) {            return toString.call(obj) === '[object ' + name + ']';        };    });    // Define a fallback version of the method in browsers (ahem, IE < 9), where    // there isn't any inspectable "Arguments" type.    if (!_.isArguments(arguments)) {        _.isArguments = function(obj) {            return _.has(obj, 'callee');        };    }    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,    // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).    var nodelist = root.document && root.document.childNodes;    if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {        _.isFunction = function(obj) {            return typeof obj == 'function' || false;        };    }    // Is a given object a finite number?    _.isFinite = function(obj) {        return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));    };    // Is the given value `NaN`?    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN    // 区别原生的isNaN（先数据类型转换，然后再判断）    // isNaN = function(value) {    //     Number.isNaN(Number(value));    // }    // isNaN('123abc') => true     parseInt('123abc') => 123   Number('123abc') => NaN    // isNaN({}) => true，_.isNaN({}) => false    //     Number.isNaN(NaN);        // true    //     Number.isNaN(Number.NaN); // true    //     Number.isNaN(0 / 0)       // true    //    // // 下面这几个如果使用全局的 isNaN() 时，会返回 true。    //     Number.isNaN("NaN");      // false，字符串 "NaN" 不会被隐式转换成数字 NaN。    //     Number.isNaN(undefined);  // false    //     Number.isNaN({});         // false    //     Number.isNaN("blabla");   // false    //    // // 下面的都返回 false    //     Number.isNaN(true);    //     Number.isNaN(null);    //     Number.isNaN(37);    //     Number.isNaN("37");    //     Number.isNaN("37.37");    //     Number.isNaN("");    //     Number.isNaN(" ");    // 该方法与Number.isNaN()类似    // Pollyfill    // Number.isNaN = Number.isNaN || function(value) {    //     return typeof value === "number" && isNaN(value);    // }    _.isNaN = function(obj) {        // 首先确保是数字，然后再调用原生的方法        return _.isNumber(obj) && isNaN(obj);    };    // Is a given value a boolean?    _.isBoolean = function(obj) {        return obj === true || obj === false || toString.call(obj) === '[object Boolean]';    };    // Is a given value equal to null?    _.isNull = function(obj) {        return obj === null;    };    // Is a given variable undefined?    //undefined vs void 0    //undefined在某些浏览器下面可以被重写    //    _.isUndefined = function(obj) {        return obj === void 0;    };    // Shortcut function for checking if an object has a given property directly    // on itself (in other words, not on a prototype).    // 判断一个对象是否含有给定的属性的简便方法（换言之，就是不是在原型上的）    // uses a safe reference to the hasOwnProperty function, in case it's been overridden accidentally.    // 因为对象上的hasOwnProperty方法可以被重写，重写后再用当前处理的对象，调用判断结果就会不准或报错，所以使用Object上的hasOwnProperty    // 方法，然后借用call改变上下文。    // http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/    _.has = function(obj, key) {        return obj != null && hasOwnProperty.call(obj, key);    };    // Utility Functions    // -----------------    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its    // previous owner. Returns a reference to the Underscore object.    _.noConflict = function() {        root._ = previousUnderscore;        return this;    };    // Keep the identity function around for default iteratees.    //这个函数返回与参数相同的值, 一般用于将一个数据的获取方式转换为函数获取方式(内部用于构建方法时作为默认处理器函数)    //这个方法看起来无任何作用，但是通篇用作默认迭代器 (_.compact)    //http://stackoverflow.com/questions/14216479/please-explain-usage-of-identityvalue-of-underscore-js    _.identity = function(value) {        return value;    };    // Predicate-generating functions. Often useful outside of Underscore.    _.constant = function(value) {        return function() {            return value;        };    };    _.noop = function() {};    _.property = property;    // Generates a function for a given object that returns a given property.    // 返回给定对象的指定key的值    // 与_.property传入参数的顺序相反    _.propertyOf = function(obj) {        return obj == null ? function() {} : function(key) {            return obj[key];        };    };    // Returns a predicate for checking whether an object has a given set of    // `key:value` pairs.    // 返回一个判断给定对象是否包含指定键值对的断言方法    _.matcher = _.matches = function(attrs) {        attrs = _.extendOwn({}, attrs);        return function(obj) {            return _.isMatch(obj, attrs);        };    };    // Run a function **n** times.    _.times = function(n, iteratee, context) {        var accum = Array(Math.max(0, n));        iteratee = optimizeCb(iteratee, context, 1);        for (var i = 0; i < n; i++) accum[i] = iteratee(i);        return accum;    };    // Return a random integer between min and max (inclusive).    // integer {-1，0，1} 负整数 、 0 、正整数    // https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B0    // [x,y]包括y,注意与Math.random的区别    _.random = function(min, max) {        if (max == null) {            max = min;            min = 0;        }        // return min + Math.ceil(Math.random() * (max - min));        return min + Math.floor(Math.random() * (max - min + 1));    };    // A (possibly faster) way to get the current timestamp as an integer.    _.now = Date.now || function() {        return new Date().getTime();    };    // List of HTML entities for escaping.    var escapeMap = {        '&': '&amp;',        '<': '&lt;',        '>': '&gt;',        '"': '&quot;',        "'": '&#x27;',        '`': '&#x60;'    };    var unescapeMap = _.invert(escapeMap);    // Functions for escaping and unescaping strings to/from HTML interpolation.    var createEscaper = function(map) {        var escaper = function(match) {            return map[match];        };        // Regexes for identifying a key that needs to be escaped.        // 正则用来识别需要被转义的key        // (?:&|<|>|"|'|`)        // (?:&amp;|&lt;|&gt;|&quot;|&#x27;|&#x60;)        // (?:x) 匹配 x 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。        // 匹配项不能够从结果数组的元素 [1], ..., [n] 或已被定义的 RegExp 对象的属性 $1, ..., $9 再次访问到。        var source = '(?:' + _.keys(map).join('|') + ')';        var testRegexp = RegExp(source);        var replaceRegexp = RegExp(source, 'g');        return function(string) {            string = string == null ? '' : '' + string;            // return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;            return testRegexp.test(string) ?                   string.replace(replaceRegexp,function (match) {                       return map[match]                   }):                   string;        };    };    _.escape = createEscaper(escapeMap);    _.unescape = createEscaper(unescapeMap);    // If the value of the named `property` is a function then invoke it with the    // `object` as context; otherwise, return it.    _.result = function(object, prop, fallback) {        var value = object == null ? void 0 : object[prop];        if (value === void 0) {            value = fallback;        }        return _.isFunction(value) ?                value.call(object):                value;    };    // Generate a unique integer id (unique within the entire client session).    // Useful for temporary DOM ids.    // 生成唯一带前缀（可选）的ID。    var idCounter = 0;    _.uniqueId = function(prefix) {        // 先++，保证从1开始，然后变为字符串        var id = ++idCounter + '';        // 判断是否有前缀        return prefix ? prefix + id : id;    };    // 另一种闭包实现：    // function uniqueId(prefix) {    //     var id = 0,    //         prefix = prefix ? prefix + '' : '';    //    //     return function () {    //         return prefix + ++id;    //     }    // }    // 调用：    //    // var u = uniqueId('iwjw');    //    // u();    // u();    // By default, Underscore uses ERB-style template delimiters, change the    // following template settings to use alternative delimiters.    _.templateSettings = {        evaluate: /<%([\s\S]+?)%>/g,        interpolate: /<%=([\s\S]+?)%>/g,        escape: /<%-([\s\S]+?)%>/g    };    // When customizing `templateSettings`, if you don't want to define an    // interpolation, evaluation or escaping regex, we need one that is    // guaranteed not to match.    var noMatch = /(.)^/;    // Certain characters need to be escaped so that they can be put into a    // string literal.    var escapes = {        "'": "'",        '\\': '\\',        '\r': 'r',        '\n': 'n',        '\u2028': 'u2028',        '\u2029': 'u2029'    };    var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;    var escapeChar = function(match) {        return '\\' + escapes[match];    };    // JavaScript micro-templating, similar to John Resig's implementation.    // Underscore templating handles arbitrary delimiters, preserves whitespace,    // and correctly escapes quotes within interpolated code.    // NB: `oldSettings` only exists for backwards compatibility.    _.template = function(text, settings, oldSettings) {        if (!settings && oldSettings) settings = oldSettings;        settings = _.defaults({}, settings, _.templateSettings);        // Combine delimiters into one regular expression via alternation.        var matcher = RegExp([            (settings.escape || noMatch).source,            (settings.interpolate || noMatch).source,            (settings.evaluate || noMatch).source        ].join('|') + '|$', 'g');        // Compile the template source, escaping string literals appropriately.        var index = 0;        var source = "__p+='";        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {            source += text.slice(index, offset).replace(escapeRegExp, escapeChar);            index = offset + match.length;            if (escape) {                source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";            } else if (interpolate) {                source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";            } else if (evaluate) {                source += "';\n" + evaluate + "\n__p+='";            }            // Adobe VMs need the match returned to produce the correct offset.            return match;        });        source += "';\n";        // If a variable is not specified, place data values in local scope.        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';        source = "var __t,__p='',__j=Array.prototype.join," +            "print=function(){__p+=__j.call(arguments,'');};\n" +            source + 'return __p;\n';        var render;        try {            render = new Function(settings.variable || 'obj', '_', source);        } catch (e) {            e.source = source;            throw e;        }        var template = function(data) {            return render.call(this, data, _);        };        // Provide the compiled source as a convenience for precompilation.        var argument = settings.variable || 'obj';        template.source = 'function(' + argument + '){\n' + source + '}';        return template;    };    // Add a "chain" function. Start chaining a wrapped Underscore object.    // 增加链式调用方法,调用此方法后得通过 .value()获得真实的值。    _.chain = function(obj) {        var instance = _(obj);        instance._chain = true;        return instance;    };    // OOP    // ---------------    // If Underscore is called as a function, it returns a wrapped object that    // can be used OO-style. This wrapper holds altered versions of all the    // underscore functions. Wrapped objects may be chained.    // Helper function to continue chaining intermediate results.    var chainResult = function(instance, obj) {        return instance._chain ? _(obj).chain() : obj;    };    // Add your own custom functions to the Underscore object.    // 为underscore对象添加自定义方法    // 类似jQuery的extend    _.mixin = function(obj) {        _.each(_.functions(obj), function(name) {            var func = _[name] = obj[name];            _.prototype[name] = function() {                var args = [this._wrapped];                push.apply(args, arguments);                return chainResult(this, func.apply(_, args));            };        });    };    // Add all of the Underscore functions to the wrapper object.    // 为包装对象添加underscore方法    _.mixin(_);    // Add all mutator Array functions to the wrapper.    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype    // JS Array的    // mutator functions:会改变自身的方法    // copyWidth/fill/pop/push/reverse/shift/sort/splice/unshift    // accessor functions:不会改变自身的方法    // concat/includes/join/slice/toSource/toString/toLocalString/indexOf/lastIndexOf    // 给包装后的对象增加改变原数组的方法    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {        var method = ArrayProto[name];        _.prototype[name] = function() {            var obj = this._wrapped;            method.apply(obj, arguments);            if ((name === 'shift' || name === 'splice') && obj.length === 0){                delete obj[0];            }            return chainResult(this, obj);        };    });    // Add all accessor Array functions to the wrapper.    _.each(['concat', 'join', 'slice'], function(name) {        var method = ArrayProto[name];        _.prototype[name] = function() {            return chainResult(this, method.apply(this._wrapped, arguments));        };    });    // Extracts the result from a wrapped and chained object.    // 从一个包装、链式对象上获取值    // 为何要放原型上呢？    // _() 和 _.chain() 调用之后，其实就是类似jQuery的无new操作返回了一个 _ 的实例，实例只能调用原型上方法，    // 经过上面两个方法包装之后，真正的值是挂在 _wrapped 上面的。    _.prototype.value = function() {        return this._wrapped;    };    // Provide unwrapping proxy for some methods used in engine operations    // such as arithmetic and JSON stringification.    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;    _.prototype.toString = function() {        return '' + this._wrapped;    };    // AMD registration happens at the end for compatibility with AMD loaders    // that may not enforce next-turn semantics on modules. Even though general    // practice for AMD registration is to be anonymous, underscore registers    // as a named module because, like jQuery, it is a base library that is    // popular enough to be bundled in a third party lib, but not be part of    // an AMD load request. Those cases could generate an error when an    // anonymous define() is called outside of a loader request.    if (typeof define == 'function' && define.amd) {        define('underscore', [], function() {            return _;        });    }}());